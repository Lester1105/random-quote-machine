{"version":3,"sources":["color-array.js","App.js","reportWebVitals.js","index.js"],"names":["colorArray","quoteUrl","App","useState","quote","setQuote","author","setAuthor","setRandomNum","array","setArray","accentColor","setAccentColor","fetchQuote","url","a","fetch","response","json","parsedJSON","quotes","console","log","useEffect","className","style","backgroundColor","id","color","icon","faQuoteLeft","onClick","randomInt","Math","floor","random","length","href","faTwitter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAWeA,G,MAXE,CAAC,UAAW,UAAW,UAAW,UAAW,UAC1D,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,8BCH5CC,EAAS,yIAgDEC,MA9Cf,WACA,MAAsBC,mBAAS,IAA/B,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAMG,EAAN,KAAaC,EAAb,KACA,EAA8BJ,mBAAS,GAAvC,mBAAgBK,GAAhB,WACA,EAAsBL,mBAAS,MAA/B,mBAAMM,EAAN,KAAYC,EAAZ,KACA,EAAmCP,mBAAS,WAA5C,mBAAOQ,EAAP,KAAmBC,EAAnB,KAEOC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACGC,MAAMF,GADT,cACdG,EADc,gBAEIA,EAASC,OAFb,OAEdC,EAFc,OAGpBT,EAASS,EAAWC,QACpBC,QAAQC,IAAIH,GAJQ,2CAAH,sDAoBjB,OAbAI,qBAAU,WACRV,EAAWZ,KACX,CAACA,IAYC,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAACC,gBAAgBf,GAAvD,SACE,sBAAKgB,GAAI,YAAYF,MAAO,CAACG,MAAMjB,GAAnC,UACD,qBAAIgB,GAAG,OAAP,UAAe,cAAE,IAAF,CAAkBE,KAAOC,MAAxC,IAAyD1B,KACzD,qBAAIuB,GAAG,SAAP,eAAmBrB,KAGnB,wBAAQqB,GAAG,YAAYI,QAhB5B,WACE,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAW1B,EAAM2B,QACjD5B,EAAawB,GACb3B,EAASI,EAAMuB,GAAW5B,OAC1BG,EAAUE,EAAMuB,GAAW1B,QAC3BM,EAAeZ,EAAWgC,KAW8BP,MAAO,CAACC,gBAAgBf,GAA7E,uBACA,qBAAKa,UAAU,SAAf,SACA,mBAAGG,GAAG,cAAcU,KAAI,gDAA2C/B,GAAUmB,MAAO,CAACC,gBAAgBf,GAArG,SAAmH,cAAE,IAAF,CAAkBkB,KAAOS,kBCjCpIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ae41d379.chunk.js","sourcesContent":["var colorArray = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n\t\t  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\nexport default colorArray;          ","import React,{useEffect, useState} from 'react';\nimport './App.scss';\nimport colorArray from './color-array';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\nlet quoteUrl='https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n\nfunction App() {\nconst[quote,setQuote]=useState(\"\");\nconst[author,setAuthor]=useState(\"\");\nconst[randomNum,setRandomNum]=useState(0);\nconst[array,setArray]=useState(null);\nconst [accentColor,setAccentColor]=useState('#000000');\n\n const fetchQuote = async (url)=>{\nconst response = await fetch(url)\nconst parsedJSON= await response.json()\nsetArray(parsedJSON.quotes)\nconsole.log(parsedJSON)\n}\n\nuseEffect(()=>{\n  fetchQuote(quoteUrl)\n},[quoteUrl]\n\n)\n  function generateRandomNum() {\n    let randomInt = Math.floor(Math.random() * array.length);\n    setRandomNum(randomInt);\n    setQuote(array[randomInt].quote);\n    setAuthor(array[randomInt].author);\n    setAccentColor(colorArray[randomInt]);\n  }\n\nreturn (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor:accentColor}}>\n        <div id =\"quote-box\" style={{color:accentColor}}>\n       <h3 id=\"text\" >< FontAwesomeIcon icon ={faQuoteLeft} /> {quote}</h3>\n       <h5 id=\"author\">- {author}</h5>\n       \n       \n       <button id=\"new-quote\" onClick={ generateRandomNum } style={{backgroundColor:accentColor}}>New quote</button>\n       <div className=\"button\">\n       <a id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?text=${author}`} style={{backgroundColor:accentColor}}>< FontAwesomeIcon icon ={faTwitter} />\n       </a>\n       </div>\n       </div>\n      </header>\n    </div>\n  );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}